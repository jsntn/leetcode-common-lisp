(defun multiply (num1 num2)
  (if (or (string= "0" num1)
          (string= "0" num2))
      (return-from multiply "0"))
  (let ((product (loop repeat (+ (length num1)
                                 (length num2)) collect 0))
        ;; parse-integer 只能作用于字符串，digit-char-p 作用于字符
        (num1 (reverse (map 'list #'digit-char-p num1)))
        (num2 (reverse (map 'list #'digit-char-p num2))))
    (loop for i below (length num1)
       do (loop for j below (length num2)
             do (let ((a (+ i j))
                      (b (+ i j 1)))
                  (incf (nth a product) (* (nth i num1)
                                           (nth j num2)))
                  (multiple-value-bind (q r) (floor (nth a product) 10)
                    (setf (nth a product) r)
                    (incf (nth b product) q))))
       finally (return (string-left-trim "0"
                                         (reverse (format nil "~{~a~}" product)))))))